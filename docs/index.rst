Flask-AutoIndex
~~~~~~~~~~~~~~~

.. module:: flaskext.autoindex

Flask-AutoIndex generates an index page to our `Flask`_ application
automatically. The result just like `mod_autoindex`_, but the look is more
awesome! Look at this:

.. figure:: _static/example.png
   :alt: The screenshot of index page generated by Flask-AutoIndex

This module contains `silk icons`_ set and pre-designed css file. It is default
style, but you can make your own style.

.. _Flask: http://flask.pocoo.org/
.. _mod_autoindex: http://httpd.apache.org/docs/current/mod/mod_autoindex.html
.. _silk icons: http://www.famfamfam.com/lab/icons/silk

Installation
============

Flask-AutoIndex is only available on GitHub now. Check out right now::

    $ git clone git://github.com/sublee/flask-autoindex.git

How to Use
==========

Flask-AutoIndex is easy and extensible. It supports flask application.

..
    TODO:
    - change "flask application" to "flask application and module"
    - add "It means we can make variety autoindex applications in one process."

We will make the application in flask application. There is a basic usage::

    import os.path
    from flask import Flask
    from flaskext.autoindex import AutoIndex
    app = Flask(__name__)
    idx = AutoIndex(app, browse_root=os.path.curdir)

After running the application, ``http://localhost/`` serves a generated index
page which contains the file and folder list in current directory.

..
    If you want to make the application in flask module, follow the below
    exmaple::

        # path: testapp/testmodule/__init__.py
        from flask import Module
        from flaskext.autoindex import AutoIndex
        mod = Module(__name__, subdomain="test")
        idx = AutoIndex(mod, browse_root="/var/www/public_html")

    ::

        # path: testapp/__init__.py
        from flask import Flask
        from testmodule import mod
        app = Flask(__name__)
        app.config["SERVER_NAME"] = "localhost"
        app.register_module(mod)

    This time, ``http://localhost/`` served nothing. But
    ``http://test.localhost/`` serves the file and folder list in
    ``/var/www/public_html``. You can register more modules as same way.

Customizing
===========

Adding icon rules
`````````````````

If you want to present ``*.feed`` files with ``rss.png`` icon and present
a folder named ``picture`` with ``folder_picture.png`` icon, follow the below
example::

    idx.add_icon_rule("rss.png", ext="feed")
    idx.add_icon_rule("folder_picture.png", foldername="pictures")

Adding specified paths
``````````````````````

Just like a nomal flask application or module. Follow the below example::

    @app.route("/helloworld")
    def helloworld():
        return "Hello, world!", 200

``http://localhost/helloworld`` will serve ``Hello, world!`` not 
``/helloworld`` folder.

API
===

Configuration
`````````````

.. autoclass:: AutoIndex
   :members:

.. autoclass:: AutoIndexApplication
   :members:

..
    .. autoclass:: AutoIndexModule
       :members:

Models
``````

.. autoclass:: Entry
   :members:

.. autoclass:: File
   :members:

.. autoclass:: Forder
   :members:

.. autoclass:: ParentFolder
   :members:

